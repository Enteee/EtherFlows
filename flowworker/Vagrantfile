# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'pp'
VAGRANTFILE_API_VERSION = "2"


DEFAULT_VAGRANT_CLUSTER_INTERFACE = ""
DEFAULT_VAGRANT_SNIFF_INTERFACE = ""
DEFAULT_VAGRANT_HOSTNAME = "default"

if ENV['VAGRANT_CLUSTER_INTERFACE'].to_s == ''
    puts "Warning: VAGRANT_CLUSTER_INTERFACE variable not set"
    puts "VAGRANT_CLUSTER_INTERFACE set to default: #{DEFAULT_VAGRANT_CLUSTER_INTERFACE}"
    ENV['VAGRANT_CLUSTER_INTERFACE'] = DEFAULT_VAGRANT_CLUSTER_INTERFACE
end
if ENV['VAGRANT_SNIFF_INTERFACE'].to_s == ''
    puts "Warning: VAGRANT_SNIFF_INTERFACE variable not set.."
    puts "VAGRANT_SNIFF_INTERFACE set to default: #{DEFAULT_VAGRANT_SNIFF_INTERFACE}"
    ENV['VAGRANT_SNIFF_INTERFACE'] = DEFAULT_VAGRANT_SNIFF_INTERFACE
end
if ENV['VAGRANT_HOSTNAME'].to_s == ''
    puts "Warning: VAGRANT_HOSTNAME variable not set.."
    puts "VAGRANT_HOSTNAME set to default: #{DEFAULT_VAGRANT_HOSTNAME}"
    ENV['VAGRANT_HOSTNAME'] = DEFAULT_VAGRANT_HOSTNAME
end

Vagrant.configure(2) do |config|
    config.vm.box = "ogarcia/archlinux-201510-x64"

    # Hardware
    config.vm.provider "virtualbox" do |v|
        v.memory = 4096
        v.cpus = 4
    end

    config.vm.network "forwarded_port", guest: 9200, host: 9200, auto_correct: true # Elasticsearch
    config.vm.network "forwarded_port", guest: 5601, host: 5601, auto_correct: true # Kibana

    config.vm.network "public_network", bridge: ENV['VAGRANT_CLUSTER_INTERFACE']
    config.vm.network "public_network", auto_config: false, bridge: ENV['VAGRANT_SNIFF_INTERFACE']
    config.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
        v.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
    end

    config.vm.hostname = ENV['VAGRANT_HOSTNAME']
    # Environment
    config.vm.provision "file", source: "sys/bashrc", destination: ".bashrc"

    # scripts
    config.vm.provision :shell do |sh|
        sh.path = "sys/bootstrap_privileged.sh"
    end
    config.vm.provision :shell do |sh|
        sh.path = "sys/bootstrap.sh"
        sh.privileged = false
    end
    config.vm.provision :shell, run: "always" do |sh|
        sh.path = "sys/services_privileged.sh"
    end
    config.vm.provision :shell, run: "always" do |sh|
        sh.path = "sys/services.sh"
        sh.privileged = false
    end
end
